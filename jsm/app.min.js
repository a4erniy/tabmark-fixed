$(document).ready(function () {
	docReady();
});

function docReady(){
	if(!app.isReady){
		setTimeout(docReady, 100);
		return;
	}
	options.init();
	promo.init();
	Updates.init();
	shareBtns.init();
	options.initToggles();
}

var icons = ["shopping-cart","folder","gear","globe","home","bookmark-o","bookmark","newspaper-o","building-o","camera","info-circle","download","envelope","exchange","external-link","fire","graduation-cap","heart","image","code","rocket","smile-o","cloud","institution","laptop","share-alt","shield","space-shuttle","sun-o","tag","trophy","barcode","book","calendar","coffee","database","envelope-o","fax","folder-open","gamepad","music","star","tags","film","dollar","paperclip","floppy-o","font","medkit","ambulance","angellist","bus","cc-visa","google-wallet","lastfm-square","paint-brush","shekel","toggle-off","twitch","area-chart","bicycle","calculator","cc-mastercard","copyright","line-chart","paypal","wifi","at","binoculars","cc","eyedropper","ioxhost","pie-chart","slideshare","trash","birthday-cake","futbol-o","lastfm","plug","tty","adjust","arrows","bolt","certificate","circle-o","close","cogs","comments-o","crop","cutlery","dot-circle-o","ellipsis-v","eraser","exclamation-triangle","fighter-jet","file-excel-o","file-photo-o","filter","toggle-on","flag-checkered","lemon-o","magnet","male","moon-o","paw","phone","print","question-circle","recycle","suitcase","tree","umbrella","unsorted","anchor","automobile","bell","bomb","briefcase","bullhorn","comment","crosshairs","level-down","location-arrow","map-marker","mobile","pencil","plane","puzzle-piece","quote-left","signal","terminal","upload","volume-down","archive","ban","bug","child","cube","gift","group","inbox","key","leaf","level-up","life-saver","lock","paper-plane","retweet","sitemap","spinner","thumb-tack","truck","volume-off","asterisk","bars","clock-o","desktop","female","flask","gavel","glass","lightbulb-o","magic","microphone","money","power-off","random","road","sliders","tablet","tasks","tint","volume-up","wrench","file","file-text","file-text-o","list","outdent","scissors","th-large","unlink","chain","copy","superscript","play","pause","stop","eject","h-square"];

var bgPage = chrome.extension.getBackgroundPage();
//----------------------- google analytics
var _gaq = bgPage._gaq;
_gaq.push(['_trackPageview']);
_gaq.push(['_trackEvent', 'newtab', 'newtab-open']);

(function () {
    var ga = document.createElement('script');
    ga.type = 'text/javascript';
    ga.async = true;
    ga.src = 'https://ssl.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
})();
//======================= analytics




var page = {
    style: null,
    init: function () {
        page.loadBg();
        page.addDynamicClasses();
    },
    loadBg: function () {
        var bodyStyle = document.body.style,
            bgUrl = (db.store.settings.bgDataUrl)? db.store.settings.bgDataUrl : db.store.settings.bg;

        bodyStyle.backgroundImage = "url('" + bgUrl + "')";
        if (db.store.settings.bgIsPattern) {
            bodyStyle.backgroundRepeat = 'repeat';
            bodyStyle.backgroundSize = 'initial';
        } else {
            bodyStyle.backgroundRepeat = 'no-repeat';
            bodyStyle.backgroundSize = 'cover';
        }
    },
    addDynamicClasses: function () {
        var options = db.store.settings;
        var style = page.style;
        if(page.style == null){
            style = (page.style) ? page.style : document.createElement('style');
            style.type = 'text/css';
            style.id = "dynamicStyle";
            document.getElementsByTagName('head')[0].appendChild(style);
        }
        var dialSpacing = options.dialSpacing === undefined ? 1 : options.dialSpacing;
        var css = '#dials .dial, #dials .box-state-highlight { width: ' + options.dialWidth + 'px; height: ' + options.dialHeight + 'px; margin: '+dialSpacing+'px; }';
        if(options.dialWidth < 250){
            css += '#dials a.dial .inner.generated .name{font-size: 15px;}';
            css += '#dials a.dial .inner.generated .favicon{display:block;}';
        }
        style.innerHTML = css;
    }
};


var tabs = {
    dom: $(".tabs"),
    init: function () {
        app.activeTab = db.store.tabs[0];
        this.render();
        $(".ctab").click(function () {
            tabs.openCEModal();
        });
    },
    render: function () {
        var html = "";
        db.store.tabs.forEach(function (val) {
//            html += templates.render("tab", val);
            html += templates.list.tab({tab: val});
        });
        tabs.dom.html(html);
        tabs.enableSorting();
        tabs.findById(app.activeTab.id).addClass("open");

        $('.tabs .tab')
            .click(function () {
                tabs.open($(this))
            })
            .contextMenu({
                menuSelector: "#tab-context-menu",
                menuSelected: function (invokedOn, selectedMenu) {
                    var id = invokedOn.data("id"),
                        action = selectedMenu.data("action"),
                        tab = _.findWhere(db.store.tabs, {id: id});
                    action = tabs[action];
                    action(tab);
                }
            });
    },
    enableSorting: function () {
        $(".tabs").sortable({
            tolerance: "pointer",
            placeholder: "box-state-highlight",
            update: function () {

                $(".tabs .tab").each(function (key, val) {
                    var $val = $(val);
                    var id = $val.data("id");
                    var tab = _.findWhere(db.store.tabs, {id: id});
                    tab.order = key;
                });
                db.store.tabs = _.sortBy(db.store.tabs, 'order');
                db.save("tabs");
            }
        });
    },
    open: function (dom) {
        $(".tabs .tab.open").removeClass("open");
        dom.addClass("open");
        app.activeTab = _.findWhere(db.store.tabs, {id: dom.data("id")});
        dials.filterActive();
    },
    findById: function (id) {
        return $(".tab[data-id='" + id + "']");
    },
    openCEModal: function (tab) { // Create and Edit modal
        var isNew = false;
        var m = {
            id: "tabCEModal",
            classes: {dialog: "tabDialog"},
            actionName: "Save"
        };
        if (typeof tab === 'undefined') {
            isNew = true;
            m.title = "Create tab";
            tab = {
                id: Date.now(),
                name: "New Tab",
                icon: "home",
                order: db.store.tabs.length
            };
        } else {
            m.title = "Edit tab";
        }

        m.content = templates.list.createTabModal({tab: tab, icons: icons});
        var submitFn = function (event) {
            event.preventDefault();

            tab.name = $(this).find("input[type=text]").val();

            if (isNew) db.store.tabs.push(tab);

            db.save("tabs");
            tabs.render();
            modal.close(m.id);
        };

        var view = modal.render({modal: m}, {submit: submitFn});

        view.find("[data-icon]").click(function () {
            view.find(".active[data-icon]").removeClass("active");
            tab.icon = $(this).addClass("active").attr("data-icon");
        });
    },
    openDeleteModal: function (tab) {
        var content = templates.list.deleteTabModal(tab);
        var m = {
            id: "deleteTabModal",
            title: "Delete tab: " + tab.name,
            actionName: "Delete",
            content: content,
            classes: {dialog: "tabDialog"}
        };

        var submitFn = function (event) {
            event.preventDefault();
            var tabList = db.store.tabs;
            var index = _.indexOf(tabList, tab);
            tabList.splice(index, 1);
            db.save("tabs");
            tabs.render();
            modal.close(m.id)
        };
        modal.render({modal: m}, {submit: submitFn});
    }
};


var dials = {
    dom: $(".dials"),
    init: function () {
        this.render();
        $(".add-dial").click(function () {
            dials.openCEModal();
        });
    },
    render: function () {
        var html = "";
        var activeDials = _.where(db.store.dials, {tabId: app.activeTab.id});
        db.store.dials.forEach(function (val) {
            var context = {dial: val};
            if (!_.contains(activeDials, val)) {
                context.extraClasses = "filtered";
            }
            context.extraClasses += db.store.settings.dialsHoverAnimation ? " animate": "";
            html += templates.list.dial(context);
        });
        dials.dom.html(html);
        dials.enableSorting();

        $(".dials .dial")
            .click(function () {
                var dialId = isNaN(parseInt(this.id)) ? this.id : parseInt(this.id);
                var dial = _.find(db.store.dials, {id: dialId});
                dial.counter = dial.counter + 1;
                db.save("dials");
                _gaq.push(['_trackEvent', 'dials', 'dials-click', dial.url.replace(/(\/+)$/, '')]);
                if (!_.isEmpty(dial.imgUrl)) return true;
                db.s("requestThumb", {
                    url: dial.url,
                    dialId: dial.id
                });
            })
            .contextMenu({
                menuSelector: "#dial-context-menu",
                menuSelected: function (invokedOn, selectedMenu) {
                    var id = (invokedOn.hasClass("dial")) ? invokedOn.data("id") : invokedOn.parents(".dial").data("id"),
                        action = selectedMenu.data("action"),
                        dial = _.findWhere(db.store.dials, {id: id});
                    action = dials[action];
                    action(dial);
                }
            });
    },
    filterActive: function () {
        var activeDials = _.where(db.store.dials, {tabId: app.activeTab.id});
        dials.dom.find(".dial:not(.filtered)").addClass("filtered");
//        dials.dom.find(".dial").hide(300);
        activeDials.forEach(function (val) {
            dials.findById(val.id).removeClass("filtered");
//            dials.findById(val.id).show(300);
        })
    },
    enableSorting: function () {
        $(".dials").sortable({
            tolerance: "pointer",
            placeholder: "box-state-highlight",
            update: function () {

                $(".dials .dial").each(function (key, val) {
                    var $val = $(val);
                    var id = $val.data("id");
                    var dial = _.findWhere(db.store.dials, {id: id});
                    dial.order = key;
                });
                db.store.dials = _.sortBy(db.store.dials, 'order');
                db.save("dials");
            }
        });
    },
    findById: function (id) {
        return $(".dial[data-id='" + id + "']");
    },
    openInNewTab: function(dial){
        _gaq.push(['_trackEvent', 'dials', 'dials-click', dial.url.replace(/(\/+)$/, '')]);
        chrome.tabs.create({url: dial.url});
    },
    openInBackground: function(dial){
        _gaq.push(['_trackEvent', 'dials', 'dials-click', dial.url.replace(/(\/+)$/, '')]);
        chrome.tabs.create({url: dial.url, active: false});
    },
    openCEModal: function (dial) { // Create & Edit modal
        var isNew = false;
        var m = {
            id: "dialModalCE",
            actionName: "Save"
        };
        if (typeof dial === 'undefined') {
            isNew = true;
            m.title = "Create New Dial";
            dial = {
                id: Date.now(),
                name: "",
                url: "",
                imgUrl: "",
                tabId: app.activeTab.id,
                order: db.store.dials.length,
                counter: 0
            };
        } else {
            m.title = "Edit dial"
        }

        m.content = templates.list.createDialModal({dial: dial, tabs: db.store.tabs});
        var submitFn = function (event) {
            event.preventDefault();

            dial.name = $(this).find("#dial-name").val();
            dial.url = $(this).find("#dial-url").val();
            dial.imgUrl = $(this).find("#dial-img-url").val();
            dial.tabId = $(this).find("#dial-tabId").val() * 1;

            var slide = slider.slides.eq(slider.activeSlide);
            dial.type = slide.data('type');

            if(dial.type == 'gen'){
                dial.bgcolor = slide.css('background');
                dial.fcolor = slide.css('color');
                dial.imgUrl = slide.find('img').attr('src');
            } else {
                dial.imgUrl = slide.data('src');
            }

            if (isNew) {
                db.store.dials.push(dial);
                _gaq.push(['_trackEvent', 'dials', 'dials-create', dial.url.replace(/(\/+)$/, '')]);
            }
            if (['http','https','chrome'].indexOf(dial.url.split("://")[0]) == -1) {
                dial.url = 'http://' + dial.url;
            }

            db.save("dials");
            dials.render();
            modal.close(m.id);
        };
        slider.destroy();
        var view = modal.render({modal: m}, {submit: submitFn});
        view.find('.slide').first().addClass('current');
        view.find('#dial-url').blur(function(){
            if(['http','https','chrome'].indexOf(this.value.split("://")[0]) == -1){
                this.value = 'http://' + this.value;
            }
            slider.init(view, dial, isNew);
        });
        if(!isNew){
            slider.init(view, dial, isNew);
        }
        view.find('.reload-btn').click(function(){
            slider.init(view, dial, true);
        });
        view.find('.btn-select-image').click(function(){
            if(!view.find('#dial-url').val()){
                alert("Please specify url before adding any image");
            } else {
                view.find('#dial-create-file').click();
            }
        });
        view.find('#dial-create-file')[0].onchange = function(){
            var file = this.files[0];
            var reader = new FileReader();
            reader.onload = function(){
                helper.resizeImage(reader.result, db.store.settings.dialWidth, function(url){
                    slider.addImage(url, 'custom');
                    slider.setActiveSlide(slider.slides.length-1);
                });

            };
            reader.readAsDataURL(file);
        };

        view.find('#dial-name').keyup(function () {
            slider.dom.find('.colorBased .name').text(this.value);
        });

        dials.suggestUrl();
    },
    openDeleteModal: function (dial) {
        var content = templates.list.deleteDialModal(dial);

        var m = {
            id: "deleteDialModal",
            actionName: "Delete",
            title: "Delete dial: " + dial.name,
            content: content
        };

        var submitFn = function (event) {
            event.preventDefault();

            var dialList = db.store.dials;
            var index = _.indexOf(dialList, dial);
            dialList.splice(index, 1);
            db.save("dials");
            dials.render();
            modal.close(m.id);
        };
        modal.render({modal: m}, {submit: submitFn})
    },
    reloadThumbnail: function (dial) {
        db.s("requestThumb", {
            url: dial.url,
            dialId: dial.id
        });
        dial.imgUrl = "";
        db.save("dials");
        helper.openInCurrent(dial.url);
    },
    suggestUrl: function () {
        chrome.history.search({text: "", maxResults: 5000, startTime: 0}, function (d) {
            var f = new Array();
            var j = [];
            var a = [];
            var g;
            for (var c = 0; c < d.length; ++c) {
                if (typeof d[c].url != "undefined" && d[c].url.indexOf("chrome-extension") < 0 && d[c].url.indexOf('data:image')<0) {
                    g = helper.getHostname(d[c].url);
                    if (g) {
                        if (!a[g]) {
                            a[g] = 1;
                            j.push("http://" + g);
                        }
                    }
                }
            }
            $("#dial-url").autocomplete({
                source: function (request, response) {
                    var results = $.ui.autocomplete.filter(j, request.term);
                    response(results.slice(0, 10));
                }
            }).blur(function () {
                $("#dial-name").val(helper.getHostname(this.value, true))
            });
        })

    }
};

var slider = {
    isNew: false,
    dial: null,
    dom: null, //jquery object
    slides: [], // jquery array
    colors: [],
    colorSlide: null, // jquery object
    activeSlide: null, // index of active slide
    defaultColors: ["#2ecc71", "#1abc9c", "#3498db", "#f1c40f", "#9b59b6", "#f1c40f", "#2c3e50","#e67e22", "#e74c3c","#95a5a6"],
    furl: null,
    view: null,
    buttonsInited: false,
    destroy: function(){
        var reset = ['isNew', 'dial', 'dom', 'colors', 'colorSlide', 'activeSlide', 'furl', 'view', 'buttonsInited'];
        for(i in reset) slider[reset[i]] = null;
        slider.slides = [];
    },
    init: function (view, dial, isNew) {

        slider.view = view;
        slider.isNew = isNew;
        slider.dial = dial;
        slider.dom = view.find('.slider');
        slider.furl = view.find('#dial-url');
        slider.fname = view.find('#dial-name');
        slider.colorSlide = slider.dom.find('.slide.colorBased');
        slider.colorSlide.find('.name').text(slider.fname.val());
        slider.predefines();
        slider.slides = slider.dom.find('.slide');

        if(isNew){
            slider.initCreate();
        } else {
            slider.initEdit(dial);
        }
        slider.initButtons();

    },
    initButtons: function(){
        if(!slider.buttonsInited){
            slider.dom.find('.next').click(slider.next);
            slider.dom.find('.prev').click(slider.prev);

            $('.color-switcher').on("click", ".color", function () {
                slider.changeColor(this.dataset.id);
            });
            slider.buttonsInited = true;
        }
    },
    initCreate: function(){
        console.log("Init create");
        slider.setLoading();
        slider.setActiveSlide(1 % slider.slides.length);
        slider.createColorBased();
    },
    initEdit: function(dial){
        console.log("Init edit");
        if(slider.dial.type == 'gen'){
            console.log("type gen");
            var slide = slider.colorSlide;
            slider.setActiveSlide(0);
            slide.find('img').attr('src', dial.imgUrl);
            slide.css('background', dial.bgcolor);
            slide.css('color', dial.fcolor);
        } else {
            console.log("Type else");
            slider.slides.each(function(index, slide){
                if($(slide).css('background-image') == 'url('+dial.imgUrl+')'){
                    $(slide).remove();
                }
            });
            var slide = "<div class='slide predefined'  data-type='image' data-src='"+dial.imgUrl+"' style='background-image: url("+dial.imgUrl+") '></div>";
            slider.dom.append(slide);
            slider.slides = slider.dom.find('.slide');
            slider.setActiveSlide(slider.slides.length-1);
        }
    },
    setLoading: function(){
        slider.colorSlide.find('img').attr('src', '/images/loading.gif');
    },
    stopLoading: function(faviconUrl){
        faviconUrl = faviconUrl ? faviconUrl : "/images/19.png";
        slider.colorSlide.find('img').attr('src', faviconUrl);
    },
    predefines: function(){
        if(slider.slides.length>1){
            slider.slides.not('.colorBased').remove();
        }
        var url = helper.getHostname(slider.furl.val(), true);
        if(logos[url] !== undefined){
            logos[url].forEach(function(img){
                slider.addImage(img);
            });
        }
    },
    addImage: function(url, extraClasses){
        extraClasses = extraClasses || '';
        var slide = "<div class='slide predefined "+extraClasses+"'  data-type='image' data-src='"+url+"' style='background-image: url("+url+") '></div>";
        slider.dom.append(slide);
        slider.slides = slider.dom.find('.slide');
    },
    next: function () {
        var i = (slider.activeSlide + 1) % slider.slides.length;
        slider.setActiveSlide(i);
    },
    prev: function () {
        var i = (slider.activeSlide - 1) % slider.slides.length;
        slider.setActiveSlide(i);
    },
    setActiveSlide: function (i) {
        slider.activeSlide = i;
        //if(slider.slides.length>0){
            slider.slides.removeClass('current');
            slider.slides.eq(i).addClass('current');
        //}
    },
    createColorBased: function () {
        helper.findFavicon(slider.furl.val(), function(faviconUrl){
            if(faviconUrl){
                var img = new Image();
                img.onload = function () {
                    slider.setColors(getTopRGB(img));
                    slider.stopLoading(faviconUrl);
                }
                img.onerror = function(){
                    slider.stopLoading(false);
                    slider.setColors(slider.defaultColors);
                }
                img.src = faviconUrl;
            } else {
                slider.stopLoading(false);
                slider.setColors(slider.defaultColors);
            }
        });
    },
    setColors: function (colors) {
        slider.colors = colors;
        var wrap = slider.colorSlide.find('.color-switcher');
        wrap.html("");
        slider.colors.forEach(function (color, i) {
            wrap.append("<div class='color' style='background-color:" + color + "' data-id='" + i + "'></div>");
        });
        slider.changeColor(0);
    },
    changeColor: function (i) {
        var color = slider.colors[i];
        var slide = slider.colorSlide;
        slide.css('background', color);
        slide.css('color', helper.chooseTextColor(color));
    }
}

var options = {
    widthTresh: 250,
    init: function () {
        $(".btn-group-options a").click(function (event) {
            var action = options[$(this).data("action")];
            if (action) {
                action();
                event.preventDefault();
            }
        })
    },
    changeBackground: function () {
        var content = templates.list.optionsBg({options: db.store.settings});

        var view = modal.render({
            modal: {
                id: "options-bg",
                title: "Change background",
                icon: "image",
                content: content
            }
        });

        var patternsDiv = view.find(".bg-patterns");
        var wallsDiv = view.find(".bg-walls");
        view.find(".btn-load-custom-bg").click(function () {
            db.store.settings.customBg = view.find("#bg-custom-url").val();
            db.store.settings.bg = db.store.settings.customBg;
            db.save("settings");
            options.saveBgImageUrl();
            page.loadBg();
        });
        view.find("#bg-repeat").click(function () {
            db.store.settings.bgIsPattern = true;
            db.save("settings");
            options.saveBgImageUrl();
            page.loadBg();
        });
        view.find("#bg-no-repeat").click(function () {
            db.store.settings.bgIsPattern = false;
            db.save("settings");
            options.saveBgImageUrl();
            page.loadBg();
        });

        function activateBg() {
            $("#options-bg").find(".thumb.active").removeClass("active");
            $(this).addClass("active");
            db.store.settings.bg = $(this).data("url");
            db.store.settings.bgIsPattern = $(this).data("isPattern");
            db.save("settings");
            var bodyStyle = document.body.style;
            bodyStyle.backgroundImage = "url('" + db.store.settings.bg + "')";
            if (db.store.settings.bgIsPattern) {
                bodyStyle.backgroundRepeat = 'repeat';
                bodyStyle.backgroundSize = 'initial';
            } else {
                bodyStyle.backgroundRepeat = 'no-repeat';
                bodyStyle.backgroundSize = 'cover';
            }
            options.saveBgImageUrl();
        }

        backgrounds.patterns.forEach(function (val) {
            var el = $("<div class='thumb pat'></div>")
                .css("background-image", "url('" + val.thumb + "')")
                .data("url", val.url)
                .data("isPattern", true)
                .click(activateBg);
            patternsDiv.append(el);
        });
        for (var smallImg in backgrounds.walls) {
            var bigImg = backgrounds.walls[smallImg];
            var el = $("<div class='thumb wall'></div>")
                .css("background-image", "url('" + smallImg + "')")
                .data("url", bigImg)
                .data("isPattern", false)
                .click(activateBg);
            wallsDiv.append(el);
        }
    },

    saveBgImageUrl: function () {
        db.s('bgDataUrl', false);
        helper.getImgDataUrl(db.store.settings.bg, function (dataUrl) {
            db.store.settings.bgDataUrl = dataUrl;
        });
    },

    general: function () {
        var content = templates.list.optionsGen({options: db.store.settings});

        var view = modal.render({
            modal: {
                id: "options-gen",
                title: "Speed Dial Options",
                content: content
            }
        });

        view.find("#dialWidth").change(function () {
            $(".dial").css({width: this.value});
            db.store.settings.dialWidth = this.value;
            page.addDynamicClasses();
            db.save("settings");
        });
        view.find("#dialHeight").change(function () {
            db.store.settings.dialHeight = this.value;
            page.addDynamicClasses();
            db.save("settings");
        });
        view.find("#dialSpacing").change(function () {
            db.store.settings.dialSpacing = this.value;
            page.addDynamicClasses();
            db.save("settings");
        });
        view.find("#dialsHoverAnimation").click(function () {
            db.store.settings.dialsHoverAnimation = this.checked;
            db.save("settings");
            options.toggleAnimations();
        });
    },
    toggleAnimations: function(){
        db.store.settings.dialsHoverAnimation ?
            $("a.dial").addClass('animate') :
            $("a.dial").removeClass('animate');
    },
    openDownloads: function () {
        helper.openInCurrent('chrome://downloads');
    },
    ie: function () {
        var content = templates.list.optionsIE({});

        var view = modal.render({
            modal: {
                id: "options-io",
                title: "Import/Export",
                content: content
            }
        });

        view.find('#btn-export').click(options.export);
        view.find('#btn-import').click(function(){
            view.find('#importFile').click();
        });
        view.find('#importFile').change(options.import);
    },
    import: function(event){
        var file = event.target.files[0];
        if (file) {
            var reader = new FileReader();
            reader.onload = function(e) {
                if(file.name.substr(-3,3) != 'tbm'){
                    alert('The file type is not correct. (Must be .tbm)');
                    return;
                }
                var importData = null;
                try {
                    importData = JSON.parse(e.target.result);
                } catch (e) {
                    alert("The file is corrupted.");
                    return false;
                }
                if(importData.store === undefined || importData.ls === undefined){
                    alert("The file is corrupted");
                    return;
                }
                options.doImport(importData);
            };
            reader.readAsText(file);
        } else {
            alert("Failed to load file");
        }
    },
    doImport: function(importData){
        db.store = importData.store;
        db.saveAll();
        for(var i in importData.ls){
            db.s(i,importData.ls[i]);
        }
        location.reload();
    },
    export: function () {
        // clean data from previous versions of db
        delete localStorage.dials;
        delete localStorage.tabs;
        delete localStorage.settings;
        delete localStorage.defaults;

        var exportData = {
            store: db.store,
            ls: JSON.parse(JSON.stringify(localStorage))
        };
        exportData = JSON.stringify(exportData);
        helper.save(exportData, 'export.tbm', 'text/tbm');
    },
    initToggles: function(){

        $('.list-toggle')
            .each(function(key, dom){
                $(dom).find('input')[0].checked = db.store.settings[dom.dataset.name];
            })
            .click(function(event){
                event.stopPropagation();
                db.store.settings[this.dataset.name] = $(this).find('input')[0].checked;
                db.save("settings");

                if(this.dataset.eval){
                    eval(this.dataset.eval);
                }
            });
    }
};

var modal = {
    render: function (context, fns) {
        var modalHtml = $(templates.list.modal(context));
        $("body").append(modalHtml);

        if(fns !== undefined && fns.submit !== undefined){
            modalHtml.find("form").submit(fns.submit);
        }

        modalHtml.find("[data-dismiss=modal]").click(function () {
            helper.closeModal(modalHtml);
        });

        setTimeout(function () {
            modalHtml.modal("show");
            $(".modal-backdrop").remove()
        }, 100)
        return modalHtml;
    },
    close: function (id) {
        var m = $("#" + id);
        m.modal("hide");
        $(".modal-backdrop").remove();
        setTimeout(function () {
            m.remove();
        }, 500);
    }

};


var recentTabs = {
    init: function () {
//        if (bgPage.removedTabs.length == 0) return;
        recentTabs.build();
        $('.btn-group-recent-tabs .clear-btn').click(function () {
            helper.openInCurrent('chrome://history/');
        });

        $('.btn-group-recent-tabs').on('click', 'li a', function(e){
            e.preventDefault();
            var sessionId = $(this).data('sessionId');
            _gaq.push(['_trackEvent', 'open', 'open-recent-tab']);
            chrome.tabs.getCurrent(function(tabToClose) {
                chrome.sessions.restore(sessionId+'', function(restoredSession){
                    chrome.tabs.remove(tabToClose.id, function() { });
                });
            });
        });
    },
    build: function () {
        var dom = $('.btn-group-recent-tabs ul');
        var tmp = '<li class="recent-item"><a href="{url}" data-session-id="{sessionId}"><img src="{favicon}" width="16" />{title}</a></li>';

        chrome.sessions.getRecentlyClosed({maxResults: 15}, function(list){
            list.forEach(function (tab) {
                tab = tab.tab;
                if(tab === undefined) return true;
                if(tab.url.indexOf('chrome://newtab') == 0) {
                    return true;
                }
                var faviconId = helper.getHostname(tab.url, true);
                tab.favIconUrl = (bgPage.tabFavicons[faviconId] !== undefined)? bgPage.tabFavicons[faviconId] : "/images/blank_favicon.png";
                var item = tmp.replace('{url}', tab.url)
                    .replace('{favicon}', tab.favIconUrl)
                    .replace('{title}', tab.title)
                    .replace('{sessionId}', tab.sessionId);
                dom.append(item);
            });
        });

    }
};


var search = {
    dom: null,
    form: null,
    currentEngine: "google",
    engines: {
        google: {name: 'Google', url: 'https://www.google.com/search', icon: 'www.google.com.ico', queryName: 'q', autocompleteUrl: "http://suggestqueries.google.com/complete/search"},
        amazon: {name: 'Amazon', url: 'http://www.amazon.com/s/', icon: 'amazon.com.png', queryName: 'field-keywords'},
        bing: {name: 'Bing', url: 'https://www.bing.com/search', icon: 'www.bing.com.ico', queryName: 'q'},
        yahoo: {name: 'Yahoo', url: 'https://search.yahoo.com/search', icon: 'www.yahoo.com.ico', queryName: 'p'},
        wikipedia: {name: 'Wikipedia', url: 'https://wikipedia.org/w/index.php', icon: 'www.wikipedia.com.ico', queryName: 'search'},
        youtube: {name: 'YouTube', url: 'https://www.youtube.com/results', icon: 'youtube.png', queryName: 'search_query'},
        "name.com": {name: 'Name.com', url: 'https://www.name.com/domain/search/', icon: 'name.com.png', queryName: 'domain'}
    },
    init: function () {
        search.dom = $('#search');
        if(db.store.settings.showSearchbar){
            search.dom.show();
        }
        search.form = search.dom.find('form');
        if(_.isUndefined(db.store.settings.searchEngineId)){
            search.saveEngine("google");
        }
        search.setEngine(db.store.settings.searchEngineId);
        search.render();

        $('#search-query').keyup(function(){
            $.getJSON(search.engines.google.autocompleteUrl + "?client=chrome&q=" + this.value).success(function(data){
                var options = "";
                _.each(data[1], function(val){
                    options += "<option value='"+val+"'>"+val+"</option>";
                });
                document.getElementById("search-autocomplete").innerHTML = options;
            });
        });

        search.form.submit(function(){
            _gaq.push(['_trackEvent', 'search', 'search-'+search.currentEngine, $('#search-query').val()]);
        });
    },
    toggle: function(){
        db.store.settings.showSearchbar? search.dom.show() : search.dom.hide();
    },
    setEngine: function (id) {
        var engine = search.engines[id];
        search.form.attr('action', engine.url);
        $('#current-engine img').attr('src', "/images/favicons/" + engine.icon);
        $('#search-query').attr('name', engine.queryName)
        search.currentEngine = id;
    },
    saveEngine: function(id){
        db.store.settings.searchEngineId = id;
        db.save('settings');
    },
    render: function () {
        var list = search.form.find('.dropdown-menu');
        var tmp = '<li data-id="{id}"><a href="#"><img src="/images/favicons/{icon}" alt="{name}"/> {name}</a></li>';

        _.each(search.engines, function (engine, id) {
            var itemHtml = tmp.replace(/{name}/g, engine.name)
                .replace(/{id}/g, id)
                .replace(/{icon}/g, engine.icon);
            list.append(itemHtml);
        });
        list.find('li').click(function () {
            search.setEngine($(this).data('id'));
            search.saveEngine($(this).data('id'));
        });
    }
};


var chromeApps = {
    list: [],
    render: function () {

    },
    init: function () {
        chrome.management.getAll(function (list) {
            chromeApps.list = _.where(list, {isApp: true});
            var appsDom = document.getElementById('chromeApps');
            var appsDomList = $(appsDom).find('.dropdown-menu');
            chromeApps.list.forEach(function (val, index) {
                var tmp = templates.list.chromeApp({
                    index: index,
                    src: chromeApps.getIcon(val),
                    name: val.name,
                    shortName: val.shortName
                });
                appsDomList.append(tmp);
            });
            $(appsDom).find('.chrome-app')
                .click(function () {
                    var appToLaunch = chromeApps.list[$(this).data('index')];
                    chromeApps.run(appToLaunch);
                })
                .contextMenu({
                    menuSelector: "#chrome-app-context-menu",
                    menuSelected: function (invokedOn, selectedMenu) {
                        var index = (invokedOn.hasClass("chrome-app")) ? invokedOn.data("index") : invokedOn.parents(".chrome-app").data("index"),
                            action = selectedMenu.data("action"),
                            chromeApp = chromeApps.list[index];
                        action = chromeApps[action];
                        action(chromeApp);
                    }
                });
        })
    },
    getIcon: function (a) {
        return a.icons[a.icons.length - 1].url;
    },
    run: function (capp) {
        _gaq.push(['_trackEvent', 'chrome-apps', 'chrome-apps-open', capp.shortName]);
        chrome.management.launchApp(capp.id, function(){
            chrome.tabs.remove(app.tabId);
        });
    },
    webstore: function (capp) {
        _gaq.push(['_trackEvent', 'chrome-apps', 'chrome-apps-webstore', capp.shortName]);
        helper.openInCurrent(capp.homepageUrl);
    },
    uninstall: function (capp) {
        _gaq.push(['_trackEvent', 'chrome-apps', 'chrome-apps-uninstall', capp.shortName]);
        chrome.management.uninstall(capp.id);
    },
    createShortcut: function (capp) {
        _gaq.push(['_trackEvent', 'chrome-apps', 'chrome-apps-createshortcut', capp.shortName]);
        chrome.management.createAppShortcut(capp.id);
    }
};


var promo = {
    showTreshold: 50,
    n:{
        date1: "promo_date1",
        newtab_count:"promo_newtab_count",
        rated: "promo_rated",
        remind_date: "promo_remind_date"
    },
    init: function(){
        if(!db.g('promo_date1')){
            var pdate = Date.now();
            db.s(promo.n.date1, pdate);
            db.s(promo.n.newtab_count, 1);
        } else {
            if(!db.g(promo.n.rated) && db.g(promo.n.remind_date) < Date.now()){
                var newtabCount = this.incCounter();
                if(newtabCount > promo.showTreshold){
                    promo.showRateUs();
                }
            }
        }
    },
    incCounter: function(){
        var newtabCount = db.g(promo.n.newtab_count)*1+1;
        db.s(promo.n.newtab_count, newtabCount);
        return newtabCount;
    },
    showRateUs: function(){
        var tmp = "<div class=\"text-center\">\n    <h1>Do you enjoy your new experience with TabMark?</h1>\n\n    <p class=\"stars\">\n        <i class=\"fa fa-star\"></i>\n        <i class=\"fa fa-star\"></i>\n        <i class=\"fa fa-star\"></i>\n        <i class=\"fa fa-star\"></i>\n        <i class=\"fa fa-star-half-o\"></i>\n    </p>\n\n    <span class=\"btn btn-link remind-btn\" data-dismiss=\"modal\">Remind me tomorrow...</span>\n    <a class=\"btn btn-success btn-lg rate-btn\" href=\"https://chrome.google.com/webstore/detail/tabmark-newtab-speed-dial/mklfhpmcnamcncipgjdildbffdjdfdol/reviews\">Rate us</a>\n\n    <br/><br/>\n    <span class=\"btn btn-link neverAgain-btn\">Never show again</span>\n    <br/><br/>\n    <p class=\"extra-text\">\n        Please, rate us on Google Web Store. <br/>\n        And help us to bring you a better experience.\n    </p>\n\n\n</div>";
        var modalData = {
            id: 'promo-rate-us',
            title: '',
            content: tmp
        };
        var view = modal.render({modal: modalData});
        view.find('.rate-btn').click(function(event){
            event.preventDefault();
            db.s(promo.n.rated, true);
            helper.openInCurrent(this.href);
        });
        view.find('.remind-btn').click(function(){
            modal.close(modalData.id);
            db.s(promo.n.remind_date, Date.now() + 3600*24*1000);
            db.s(promo.n.newtab_count, 0);
        });
        view.find('.neverAgain-btn').click(function(){
            modal.close(modalData.id);
            db.s(promo.n.rated, true);
        });
    }
}


var Updates = (function(){

    return  {
        init: function(){
            if(db.g("showUpdateLog")){
                var html = templates.list.updateLog({});
                var modalData = {
                    id: 'update-log',
                    title: 'What\'s new',
                    content: html
                };
                var view = modal.render({modal:modalData});
                view.find("[data-dismiss=modal]").click(function(){
                    db.s("showUpdateLog", false);
                });
            }
        }
    }
})();

var app = {
    tabId: null,
    windowId: null,
    activeTab: null,
	isReady: false,
    init: function () {
        chrome.tabs.getCurrent(function(tab){
            app.tabId = tab.id;
            app.windowId = tab.windowId;
        });
        if (typeof $ === 'undefined') window.$ = bgPage.$;
        window.db = bgPage.db;
        window.backgrounds = bgPage.backgrounds;
        window.logos = bgPage.logos;
        window.templates = bgPage.templates;

        app.otherInits();
    },
    otherInits: function () {
        page.init();
        tabs.init();
        dials.init();
        search.init();
        recentTabs.init();
        chromeApps.init();
	    app.isReady = true;
    }
};


function initApp(){
    if(!bgPage.bg.isReady || !bgPage.db.isReady){
	    setTimeout(initApp, 100);
	    return;
    }
	app.init();
}
initApp();



var shareBtns = {
    dom: null,
    gplus: '<script src="https://apis.google.com/js/platform.js" async defer></script><div class="g-plusone" data-size="medium" data-callback="removeGplusBtn" data-href="https://chrome.google.com/webstore/detail/tabmark-newtab-speed-dial/mklfhpmcnamcncipgjdildbffdjdfdol"></div>',
    init: function(){
        shareBtns.dom = $("#share-btns");
        if(!db.g('hideGplus')){
            shareBtns.dom.append(shareBtns.gplus);
            shareBtns.dom.show();
        }
    }
}

function removeGplusBtn(resp){
    localStorage.hideGplus = (resp.state == 'on');
}

// rate it
// $('.reviews-panel-edit-rate-installed .rsw-unstarred')[4].click()
// cancel text edit
// $('.rating-picker-cancel-button').click()